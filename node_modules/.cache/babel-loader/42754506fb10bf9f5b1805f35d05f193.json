{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar semver = require(\"semver\");\n\nvar call_credentials_1 = require(\"./call-credentials\");\n\nexports.CallCredentials = call_credentials_1.CallCredentials;\n\nvar channel_1 = require(\"./channel\");\n\nexports.connectivityState = channel_1.ConnectivityState;\nexports.Channel = channel_1.ChannelImplementation;\n\nvar channel_credentials_1 = require(\"./channel-credentials\");\n\nexports.ChannelCredentials = channel_credentials_1.ChannelCredentials;\n\nvar client_1 = require(\"./client\");\n\nexports.Client = client_1.Client;\n\nvar constants_1 = require(\"./constants\");\n\nexports.logVerbosity = constants_1.LogVerbosity;\nexports.status = constants_1.Status;\n\nvar logging = require(\"./logging\");\n\nvar make_client_1 = require(\"./make-client\");\n\nexports.loadPackageDefinition = make_client_1.loadPackageDefinition;\nexports.makeClientConstructor = make_client_1.makeClientConstructor;\nexports.makeGenericClientConstructor = make_client_1.makeClientConstructor;\n\nvar metadata_1 = require(\"./metadata\");\n\nexports.Metadata = metadata_1.Metadata;\n\nvar server_1 = require(\"./server\");\n\nexports.Server = server_1.Server;\n\nvar server_credentials_1 = require(\"./server-credentials\");\n\nexports.ServerCredentials = server_credentials_1.ServerCredentials;\n\nvar status_builder_1 = require(\"./status-builder\");\n\nexports.StatusBuilder = status_builder_1.StatusBuilder;\n\nvar supportedNodeVersions = require('../../package.json').engines.node;\n\nif (!semver.satisfies(process.version, supportedNodeVersions)) {\n  throw new Error(\"@grpc/grpc-js only works on Node \".concat(supportedNodeVersions));\n}\n\nfunction mixin() {\n  var result = {};\n\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n    var source = _sources[_i];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = Object.getOwnPropertyNames(source)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var propName = _step.value;\n        var property = source[propName]; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n        if (typeof property === 'function') {\n          result[propName] = property;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n/**** Client Credentials ****/\n// Using assign only copies enumerable properties, which is what we want\n\n\nexports.credentials = mixin({\n  /**\n   * Combine a ChannelCredentials with any number of CallCredentials into a\n   * single ChannelCredentials object.\n   * @param channelCredentials The ChannelCredentials object.\n   * @param callCredentials Any number of CallCredentials objects.\n   * @return The resulting ChannelCredentials object.\n   */\n  combineChannelCredentials: function combineChannelCredentials(channelCredentials) {\n    for (var _len2 = arguments.length, callCredentials = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      callCredentials[_key2 - 1] = arguments[_key2];\n    }\n\n    return callCredentials.reduce(function (acc, other) {\n      return acc.compose(other);\n    }, channelCredentials);\n  },\n\n  /**\n   * Combine any number of CallCredentials into a single CallCredentials\n   * object.\n   * @param first The first CallCredentials object.\n   * @param additional Any number of additional CallCredentials objects.\n   * @return The resulting CallCredentials object.\n   */\n  combineCallCredentials: function combineCallCredentials(first) {\n    for (var _len3 = arguments.length, additional = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      additional[_key3 - 1] = arguments[_key3];\n    }\n\n    return additional.reduce(function (acc, other) {\n      return acc.compose(other);\n    }, first);\n  }\n}, channel_credentials_1.ChannelCredentials, call_credentials_1.CallCredentials);\n/**\n * Close a Client object.\n * @param client The client to close.\n */\n\nexports.closeClient = function (client) {\n  return client.close();\n};\n\nexports.waitForClientReady = function (client, deadline, callback) {\n  return client.waitForReady(deadline, callback);\n};\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**** Unimplemented function stubs ****/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nexports.loadObject = function (value, options) {\n  throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\n\nexports.load = function (filename, format, options) {\n  throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\n\nexports.setLogger = function (logger) {\n  logging.setLogger(logger);\n};\n\nexports.setLogVerbosity = function (verbosity) {\n  logging.setLoggerVerbosity(verbosity);\n};\n\nexports.getClientChannel = function (client) {\n  return client_1.Client.prototype.getChannel.call(client);\n};\n\nvar client_interceptors_1 = require(\"./client-interceptors\");\n\nexports.ListenerBuilder = client_interceptors_1.ListenerBuilder;\nexports.RequesterBuilder = client_interceptors_1.RequesterBuilder;\nexports.InterceptingCall = client_interceptors_1.InterceptingCall;\nexports.InterceptorConfigurationError = client_interceptors_1.InterceptorConfigurationError;\n\nvar resolver = require(\"./resolver\");\n\nvar load_balancer = require(\"./load-balancer\");\n\n(function () {\n  resolver.registerAll();\n  load_balancer.registerAll();\n})();","map":null,"metadata":{},"sourceType":"script"}