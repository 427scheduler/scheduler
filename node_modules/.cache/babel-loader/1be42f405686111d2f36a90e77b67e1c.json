{"ast":null,"code":"import XLSX from 'xlsx';\nimport firebase from \"./Firebase.js\";\nconst sheetHeader = [\"DAILY FLYING ORDER\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\nconst emptyCells = [\"\", \"\", \"\", \"\", \"\", \"\", \"\"];\nconst flightHeaders = [\"startTime\", \"endTime\", \"A/C\", \"BACKUP\", \"captain\", \"config\", \"fo\", \"fe\", \"crew\", \"details\", \"mission\", \"details\", \"config\", \"remarks\", \"pri\", \"meal\", \"dco\"];\nvar date = [];\n\nfunction s2ab(s) {\n  var buf = new ArrayBuffer(s.length);\n  var view = new Uint8Array(buf);\n\n  for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;\n\n  return buf;\n}\n\nconst download = (url, name) => {\n  let a = document.createElement('a');\n  a.href = url;\n  a.download = name;\n  a.click();\n  window.URL.revokeObjectURL(url);\n};\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction Export(ids, dayInfo) {\n  //Gathering all data: \n  var flights = [sheetHeader, flightHeaders];\n  firebase.firestore().collection(\"events\").where(firebase.firestore.FieldPath.documentId(), 'in', ids).get().then(querySnapshot => {\n    querySnapshot.docs.forEach(d => {\n      var d = d.data();\n      date = d.date;\n      flights.push([d.startTime, d.endTime, d.ac, d.captain, d.config, d.fo, d.fe, d.crew, d.details, d.backup, d.mission, d.details, d.config, d.remarks, d.pri, d.meal, d.dco]);\n    });\n    console.log(\"getFlights(): \", flights);\n    /* convert from array of arrays to worksheet */\n\n    var worksheet = XLSX.utils.aoa_to_sheet(flights);\n    /* merge cells A1:B1 */\n\n    var merge = XLSX.utils.decode_range(\"A1:Q1\");\n    /** generate workbook */\n\n    var new_workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(new_workbook, worksheet, date);\n    /* write file */\n\n    const wbout = XLSX.write(new_workbook, {\n      type: 'binary',\n      bookType: \"xlsx\"\n    });\n    let url = window.URL.createObjectURL(new Blob([s2ab(wbout)], {\n      type: 'application/octet-stream'\n    }));\n    download(url, 'DailyFlyingOrder.xlsx');\n  }).catch(function (error) {\n    console.log(\"Error getting data: \", error);\n  });\n}\n\nexport default Export;","map":{"version":3,"sources":["/Users/jenny/Desktop/SOAS/scheduler/src/Export.js"],"names":["XLSX","firebase","sheetHeader","emptyCells","flightHeaders","date","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","download","url","name","a","document","createElement","href","click","window","URL","revokeObjectURL","sleep","ms","Promise","resolve","setTimeout","Export","ids","dayInfo","flights","firestore","collection","where","FieldPath","documentId","get","then","querySnapshot","docs","forEach","d","data","push","startTime","endTime","ac","captain","config","fo","fe","crew","details","backup","mission","remarks","pri","meal","dco","console","log","worksheet","utils","aoa_to_sheet","merge","decode_range","new_workbook","book_new","book_append_sheet","wbout","write","type","bookType","createObjectURL","Blob","catch","error"],"mappings":"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","sourcesContent":["import XLSX from 'xlsx';\nimport firebase from \"./Firebase.js\";\n\nconst sheetHeader =[\"DAILY FLYING ORDER\", \"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"];\nconst emptyCells = [\"\",\"\",\"\",\"\",\"\",\"\",\"\"];\nconst flightHeaders = [\"startTime\",\"endTime\",\"A/C\",\"BACKUP\",\"captain\",\"config\",\"fo\",\"fe\",\"crew\",\"details\",\"mission\",\"details\",\"config\",\"remarks\",\"pri\",\"meal\",\"dco\"];\nvar date = [];\n\nfunction s2ab(s) {\n    var buf = new ArrayBuffer(s.length);\n    var view = new Uint8Array(buf);\n    for (var i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;\n    return buf;\n}\n\nconst download = (url, name) => {\n    let a = document.createElement('a')\n    a.href = url\n    a.download = name\n    a.click()\n\n    window.URL.revokeObjectURL(url)\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction Export(ids, dayInfo) {\n    //Gathering all data: \n    var flights = [sheetHeader, flightHeaders];\n        firebase.firestore().collection(\"events\").where(firebase.firestore.FieldPath.documentId(), 'in', ids)\n            .get()\n            .then((querySnapshot) => {\n                querySnapshot.docs.forEach((d) => {\n                    var d = d.data();\n                    date = d.date;\n                    flights.push([\n                        d.startTime,\n                        d.endTime,\n                        d.ac,\n                        d.captain,\n                        d.config,\n                        d.fo,\n                        d.fe,\n                        d.crew,\n                        d.details,\n                        d.backup,\n                        d.mission,\n                        d.details,\n                        d.config,\n                        d.remarks,\n                        d.pri,\n                        d.meal,\n                        d.dco,]);\n                    })\n\n                console.log(\"getFlights(): \", flights)\n                \n                /* convert from array of arrays to worksheet */\n                var worksheet = XLSX.utils.aoa_to_sheet(flights);\n\n                /* merge cells A1:B1 */\n                var merge = XLSX.utils.decode_range(\"A1:Q1\");\n\n                /** generate workbook */\n                var new_workbook = XLSX.utils.book_new();\n                XLSX.utils.book_append_sheet(new_workbook, worksheet, date);\n\n\n                /* write file */\n                const wbout = XLSX.write(new_workbook, {type:'binary', bookType:\"xlsx\"});\n\n                let url = window.URL.createObjectURL(new Blob([s2ab(wbout)], {type:'application/octet-stream'}))\n\n                download(url, 'DailyFlyingOrder.xlsx')\n\n\n\n\n                })\n            \n            .catch(function(error) {\n                console.log(\"Error getting data: \", error);\n            });\n\n        \n    \n}\n\nexport default Export;\n\n"]},"metadata":{},"sourceType":"module"}