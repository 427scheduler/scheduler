{"ast":null,"code":"/*! firebase-admin v8.12.1 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar validator = require(\"../utils/validator\");\n\nvar remote_config_utils_1 = require(\"./remote-config-utils\");\n\nvar remote_config_api_client_1 = require(\"./remote-config-api-client\");\n/**\n * Internals of an RemoteConfig service instance.\n */\n\n\nvar RemoteConfigInternals =\n/** @class */\nfunction () {\n  function RemoteConfigInternals() {}\n  /**\n   * Deletes the service and its associated resources.\n   *\n   * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\n   */\n\n\n  RemoteConfigInternals.prototype.delete = function () {\n    // There are no resources to clean up\n    return Promise.resolve(undefined);\n  };\n\n  return RemoteConfigInternals;\n}();\n/**\n * Remote Config service bound to the provided app.\n */\n\n\nvar RemoteConfig =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app for this RemoteConfig service.\n   * @constructor\n   */\n  function RemoteConfig(app) {\n    this.app = app;\n    this.INTERNAL = new RemoteConfigInternals();\n    this.client = new remote_config_api_client_1.RemoteConfigApiClient(app);\n  }\n  /**\n  * Gets the current active version of the Remote Config template of the project.\n  *\n  * @return {Promise<RemoteConfigTemplate>} A Promise that fulfills when the template is available.\n  */\n\n\n  RemoteConfig.prototype.getTemplate = function () {\n    return this.client.getTemplate().then(function (templateResponse) {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  };\n  /**\n   * Validates a Remote Config template.\n   *\n   * @param {RemoteConfigTemplate} template The Remote Config template to be validated.\n   *\n   * @return {Promise<RemoteConfigTemplate>} A Promise that fulfills when a template is validated.\n   */\n\n\n  RemoteConfig.prototype.validateTemplate = function (template) {\n    return this.client.validateTemplate(template).then(function (templateResponse) {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  };\n  /**\n   * Publishes a Remote Config template.\n   *\n   * @param {RemoteConfigTemplate} template The Remote Config template to be validated.\n   * @param {any=} options Optional options object when publishing a Remote Config template.\n   *\n   * @return {Promise<RemoteConfigTemplate>} A Promise that fulfills when a template is published.\n   */\n\n\n  RemoteConfig.prototype.publishTemplate = function (template, options) {\n    return this.client.publishTemplate(template, options).then(function (templateResponse) {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  };\n  /**\n   * Creates and returns a new Remote Config template from a JSON string.\n   *\n   * @param {string} json The JSON string to populate a Remote Config template.\n   *\n   * @return {RemoteConfigTemplate} A new template instance.\n   */\n\n\n  RemoteConfig.prototype.createTemplateFromJSON = function (json) {\n    if (!validator.isNonEmptyString(json)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'JSON string must be a valid non-empty string');\n    }\n\n    var template;\n\n    try {\n      template = JSON.parse(json);\n    } catch (e) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', \"Failed to parse the JSON string: \" + json + \". \" + e);\n    }\n\n    return new RemoteConfigTemplateImpl(template);\n  };\n\n  return RemoteConfig;\n}();\n\nexports.RemoteConfig = RemoteConfig;\n/**\n * Remote Config template internal implementation.\n */\n\nvar RemoteConfigTemplateImpl =\n/** @class */\nfunction () {\n  function RemoteConfigTemplateImpl(config) {\n    if (!validator.isNonNullObject(config) || !validator.isNonEmptyString(config.etag)) {\n      throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', \"Invalid Remote Config template: \" + JSON.stringify(config));\n    }\n\n    this.etagInternal = config.etag;\n\n    if (typeof config.parameters !== 'undefined') {\n      if (!validator.isNonNullObject(config.parameters)) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n      }\n\n      this.parameters = config.parameters;\n    } else {\n      this.parameters = {};\n    }\n\n    if (typeof config.parameterGroups !== 'undefined') {\n      if (!validator.isNonNullObject(config.parameterGroups)) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n      }\n\n      this.parameterGroups = config.parameterGroups;\n    } else {\n      this.parameterGroups = {};\n    }\n\n    if (typeof config.conditions !== 'undefined') {\n      if (!validator.isArray(config.conditions)) {\n        throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n      }\n\n      this.conditions = config.conditions;\n    } else {\n      this.conditions = [];\n    }\n  }\n\n  Object.defineProperty(RemoteConfigTemplateImpl.prototype, \"etag\", {\n    /**\n     * Gets the ETag of the template.\n     *\n     * @return {string} The ETag of the Remote Config template.\n     */\n    get: function get() {\n      return this.etagInternal;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @return {RemoteConfigTemplate} A JSON-serializable representation of this object.\n   */\n\n  RemoteConfigTemplateImpl.prototype.toJSON = function () {\n    return {\n      conditions: this.conditions,\n      parameters: this.parameters,\n      parameterGroups: this.parameterGroups,\n      etag: this.etag\n    };\n  };\n\n  return RemoteConfigTemplateImpl;\n}();","map":null,"metadata":{},"sourceType":"script"}