{"ast":null,"code":"/*! firebase-admin v8.12.1 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar machine_learning_api_client_1 = require(\"./machine-learning-api-client\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n\nvar machine_learning_utils_1 = require(\"./machine-learning-utils\");\n\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n\nvar utils = require(\"../utils\");\n/**\n * Internals of an ML instance.\n */\n\n\nvar MachineLearningInternals =\n/** @class */\nfunction () {\n  function MachineLearningInternals() {}\n  /**\n   * Deletes the service and its associated resources.\n   *\n   * @return {Promise<void>} An empty Promise that will be resolved when the\n   *     service is deleted.\n   */\n\n\n  MachineLearningInternals.prototype.delete = function () {\n    // There are no resources to clean up.\n    return Promise.resolve();\n  };\n\n  return MachineLearningInternals;\n}();\n/**\n * The Firebase Machine Learning class\n */\n\n\nvar MachineLearning =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app for this ML service.\n   * @constructor\n   */\n  function MachineLearning(app) {\n    this.INTERNAL = new MachineLearningInternals();\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseError({\n        code: 'machine-learning/invalid-argument',\n        message: 'First argument passed to admin.machineLearning() must be a ' + 'valid Firebase app instance.'\n      });\n    }\n\n    this.appInternal = app;\n    this.client = new machine_learning_api_client_1.MachineLearningApiClient(app);\n  }\n\n  Object.defineProperty(MachineLearning.prototype, \"app\", {\n    /**\n     * Returns the app associated with this ML instance.\n     *\n     * @return {FirebaseApp} The app associated with this ML instance.\n     */\n    get: function get() {\n      return this.appInternal;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Creates a model in Firebase ML.\n   *\n   * @param {ModelOptions} model The model to create.\n   *\n   * @return {Promise<Model>} A Promise fulfilled with the created model.\n   */\n\n  MachineLearning.prototype.createModel = function (model) {\n    var _this = this;\n\n    return this.signUrlIfPresent(model).then(function (modelContent) {\n      return _this.client.createModel(modelContent);\n    }).then(function (operation) {\n      return handleOperation(operation);\n    });\n  };\n  /**\n   * Updates a model in Firebase ML.\n   *\n   * @param {string} modelId The id of the model to update.\n   * @param {ModelOptions} model The model fields to update.\n   *\n   * @return {Promise<Model>} A Promise fulfilled with the updated model.\n   */\n\n\n  MachineLearning.prototype.updateModel = function (modelId, model) {\n    var _this = this;\n\n    var updateMask = utils.generateUpdateMask(model);\n    return this.signUrlIfPresent(model).then(function (modelContent) {\n      return _this.client.updateModel(modelId, modelContent, updateMask);\n    }).then(function (operation) {\n      return handleOperation(operation);\n    });\n  };\n  /**\n   * Publishes a model in Firebase ML.\n   *\n   * @param {string} modelId The id of the model to publish.\n   *\n   * @return {Promise<Model>} A Promise fulfilled with the published model.\n   */\n\n\n  MachineLearning.prototype.publishModel = function (modelId) {\n    return this.setPublishStatus(modelId, true);\n  };\n  /**\n   * Unpublishes a model in Firebase ML.\n   *\n   * @param {string} modelId The id of the model to unpublish.\n   *\n   * @return {Promise<Model>} A Promise fulfilled with the unpublished model.\n   */\n\n\n  MachineLearning.prototype.unpublishModel = function (modelId) {\n    return this.setPublishStatus(modelId, false);\n  };\n  /**\n   * Gets a model from Firebase ML.\n   *\n   * @param {string} modelId The id of the model to get.\n   *\n   * @return {Promise<Model>} A Promise fulfilled with the unpublished model.\n   */\n\n\n  MachineLearning.prototype.getModel = function (modelId) {\n    return this.client.getModel(modelId).then(function (modelResponse) {\n      return new Model(modelResponse);\n    });\n  };\n  /**\n   * Lists models from Firebase ML.\n   *\n   * @param {ListModelsOptions} options The listing options.\n   *\n   * @return {Promise<{models: Model[], pageToken?: string}>} A promise that\n   *     resolves with the current (filtered) list of models and the next page\n   *     token. For the last page, an empty list of models and no page token are\n   *     returned.\n   */\n\n\n  MachineLearning.prototype.listModels = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return this.client.listModels(options).then(function (resp) {\n      if (!validator.isNonNullObject(resp)) {\n        throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', \"Invalid ListModels response: \" + JSON.stringify(resp));\n      }\n\n      var models = [];\n\n      if (resp.models) {\n        models = resp.models.map(function (rs) {\n          return new Model(rs);\n        });\n      }\n\n      var result = {\n        models: models\n      };\n\n      if (resp.nextPageToken) {\n        result.pageToken = resp.nextPageToken;\n      }\n\n      return result;\n    });\n  };\n  /**\n   * Deletes a model from Firebase ML.\n   *\n   * @param {string} modelId The id of the model to delete.\n   */\n\n\n  MachineLearning.prototype.deleteModel = function (modelId) {\n    return this.client.deleteModel(modelId);\n  };\n\n  MachineLearning.prototype.setPublishStatus = function (modelId, publish) {\n    var updateMask = ['state.published'];\n    var options = {\n      state: {\n        published: publish\n      }\n    };\n    return this.client.updateModel(modelId, options, updateMask).then(function (operation) {\n      return handleOperation(operation);\n    });\n  };\n\n  MachineLearning.prototype.signUrlIfPresent = function (options) {\n    var _a;\n\n    var modelOptions = deep_copy_1.deepCopy(options);\n\n    if ((_a = modelOptions.tfliteModel) === null || _a === void 0 ? void 0 : _a.gcsTfliteUri) {\n      return this.signUrl(modelOptions.tfliteModel.gcsTfliteUri).then(function (uri) {\n        modelOptions.tfliteModel.gcsTfliteUri = uri;\n        return modelOptions;\n      }).catch(function (err) {\n        throw new machine_learning_utils_1.FirebaseMachineLearningError('internal-error', \"Error during signing upload url: \" + err.message);\n      });\n    }\n\n    return Promise.resolve(modelOptions);\n  };\n\n  MachineLearning.prototype.signUrl = function (unsignedUrl) {\n    var MINUTES_IN_MILLIS = 60 * 1000;\n    var URL_VALID_DURATION = 10 * MINUTES_IN_MILLIS;\n    var gcsRegex = /^gs:\\/\\/([a-z0-9_.-]{3,63})\\/(.+)$/;\n    var matches = gcsRegex.exec(unsignedUrl);\n\n    if (!matches) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', \"Invalid unsigned url: \" + unsignedUrl);\n    }\n\n    var bucketName = matches[1];\n    var blobName = matches[2];\n    var bucket = this.appInternal.storage().bucket(bucketName);\n    var blob = bucket.file(blobName);\n    return blob.getSignedUrl({\n      action: 'read',\n      expires: Date.now() + URL_VALID_DURATION\n    }).then(function (signUrl) {\n      return signUrl[0];\n    });\n  };\n\n  return MachineLearning;\n}();\n\nexports.MachineLearning = MachineLearning;\n/**\n * A Firebase ML Model output object.\n */\n\nvar Model =\n/** @class */\nfunction () {\n  function Model(model) {\n    var _a, _b, _c, _d, _e;\n\n    if (!validator.isNonNullObject(model) || !validator.isNonEmptyString(model.name) || !validator.isNonEmptyString(model.createTime) || !validator.isNonEmptyString(model.updateTime) || !validator.isNonEmptyString(model.displayName) || !validator.isNonEmptyString(model.etag)) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', \"Invalid Model response: \" + JSON.stringify(model));\n    }\n\n    this.modelId = extractModelId(model.name);\n    this.displayName = model.displayName;\n    this.tags = model.tags || [];\n    this.createTime = new Date(model.createTime).toUTCString();\n    this.updateTime = new Date(model.updateTime).toUTCString();\n\n    if ((_b = (_a = model.state) === null || _a === void 0 ? void 0 : _a.validationError) === null || _b === void 0 ? void 0 : _b.message) {\n      this.validationError = (_d = (_c = model.state) === null || _c === void 0 ? void 0 : _c.validationError) === null || _d === void 0 ? void 0 : _d.message;\n    }\n\n    this.published = ((_e = model.state) === null || _e === void 0 ? void 0 : _e.published) || false;\n    this.etag = model.etag;\n\n    if (model.modelHash) {\n      this.modelHash = model.modelHash;\n    }\n\n    if (model.tfliteModel) {\n      this.tfliteModel = {\n        gcsTfliteUri: model.tfliteModel.gcsTfliteUri,\n        sizeBytes: model.tfliteModel.sizeBytes\n      };\n    }\n  }\n\n  Object.defineProperty(Model.prototype, \"locked\", {\n    get: function get() {\n      // Backend does not currently return locked models.\n      // This will likely change in future.\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n\n  Model.prototype.waitForUnlocked = function (maxTimeSeconds) {\n    // Backend does not currently return locked models.\n    // This will likely change in future.\n    return Promise.resolve();\n  };\n\n  return Model;\n}();\n\nexports.Model = Model;\n\nfunction extractModelId(resourceName) {\n  return resourceName.split('/').pop();\n}\n\nfunction handleOperation(op) {\n  // Backend currently does not return operations that are not done.\n  if (op.done) {\n    // Done operations must have either a response or an error.\n    if (op.response) {\n      return new Model(op.response);\n    } else if (op.error) {\n      throw machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(op.error.code, op.error.message);\n    }\n  }\n\n  throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', \"Invalid Operation response: \" + JSON.stringify(op));\n}","map":null,"metadata":{},"sourceType":"script"}