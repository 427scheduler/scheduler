{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar _regeneratorRuntime = require(\"/Users/jenny/Desktop/SOAS/scheduler/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jenny/Desktop/SOAS/scheduler/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/jenny/Desktop/SOAS/scheduler/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jenny/Desktop/SOAS/scheduler/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jenny/Desktop/SOAS/scheduler/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jenny/Desktop/SOAS/scheduler/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jenny/Desktop/SOAS/scheduler/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar filter_1 = require(\"./filter\");\n\nvar constants_1 = require(\"./constants\");\n\nvar MaxMessageSizeFilter =\n/*#__PURE__*/\nfunction (_filter_1$BaseFilter) {\n  _inherits(MaxMessageSizeFilter, _filter_1$BaseFilter);\n\n  function MaxMessageSizeFilter(options, callStream) {\n    var _this;\n\n    _classCallCheck(this, MaxMessageSizeFilter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MaxMessageSizeFilter).call(this));\n    _this.options = options;\n    _this.callStream = callStream;\n    _this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n    _this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n\n    if ('grpc.max_send_message_length' in options) {\n      _this.maxSendMessageSize = options['grpc.max_send_message_length'];\n    }\n\n    if ('grpc.max_receive_message_length' in options) {\n      _this.maxReceiveMessageSize = options['grpc.max_receive_message_length'];\n    }\n\n    return _this;\n  }\n\n  _createClass(MaxMessageSizeFilter, [{\n    key: \"sendMessage\",\n    value: function () {\n      var _sendMessage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(message) {\n        var concreteMessage;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.maxSendMessageSize === -1)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", message);\n\n              case 4:\n                _context.next = 6;\n                return message;\n\n              case 6:\n                concreteMessage = _context.sent;\n\n                if (!(concreteMessage.message.length > this.maxSendMessageSize)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                this.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, \"Sent message larger than max (\".concat(concreteMessage.message.length, \" vs. \").concat(this.maxSendMessageSize, \")\"));\n                return _context.abrupt(\"return\", Promise.reject('Message too large'));\n\n              case 12:\n                return _context.abrupt(\"return\", concreteMessage);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function sendMessage(_x) {\n        return _sendMessage.apply(this, arguments);\n      }\n\n      return sendMessage;\n    }()\n  }, {\n    key: \"receiveMessage\",\n    value: function () {\n      var _receiveMessage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(message) {\n        var concreteMessage;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.maxReceiveMessageSize === -1)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", message);\n\n              case 4:\n                _context2.next = 6;\n                return message;\n\n              case 6:\n                concreteMessage = _context2.sent;\n\n                if (!(concreteMessage.length > this.maxReceiveMessageSize)) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                this.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, \"Received message larger than max (\".concat(concreteMessage.length, \" vs. \").concat(this.maxReceiveMessageSize, \")\"));\n                return _context2.abrupt(\"return\", Promise.reject('Message too large'));\n\n              case 12:\n                return _context2.abrupt(\"return\", concreteMessage);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function receiveMessage(_x2) {\n        return _receiveMessage.apply(this, arguments);\n      }\n\n      return receiveMessage;\n    }()\n  }]);\n\n  return MaxMessageSizeFilter;\n}(filter_1.BaseFilter);\n\nexports.MaxMessageSizeFilter = MaxMessageSizeFilter;\n\nvar MaxMessageSizeFilterFactory =\n/*#__PURE__*/\nfunction () {\n  function MaxMessageSizeFilterFactory(options) {\n    _classCallCheck(this, MaxMessageSizeFilterFactory);\n\n    this.options = options;\n  }\n\n  _createClass(MaxMessageSizeFilterFactory, [{\n    key: \"createFilter\",\n    value: function createFilter(callStream) {\n      return new MaxMessageSizeFilter(this.options, callStream);\n    }\n  }]);\n\n  return MaxMessageSizeFilterFactory;\n}();\n\nexports.MaxMessageSizeFilterFactory = MaxMessageSizeFilterFactory;","map":null,"metadata":{},"sourceType":"script"}