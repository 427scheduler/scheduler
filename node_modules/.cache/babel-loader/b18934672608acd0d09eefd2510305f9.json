{"ast":null,"code":"/*! firebase-admin v8.12.1 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../utils/error\");\n\nvar credential_1 = require(\"../auth/credential\");\n\nvar validator = require(\"../utils/validator\");\n\nvar utils = require(\"../utils/index\");\n/**\n * Internals of a Firestore instance.\n */\n\n\nvar FirestoreInternals =\n/** @class */\nfunction () {\n  function FirestoreInternals() {}\n  /**\n   * Deletes the service and its associated resources.\n   *\n   * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\n   */\n\n\n  FirestoreInternals.prototype.delete = function () {\n    // There are no resources to clean up.\n    return Promise.resolve();\n  };\n\n  return FirestoreInternals;\n}();\n\nvar FirestoreService =\n/** @class */\nfunction () {\n  function FirestoreService(app) {\n    this.INTERNAL = new FirestoreInternals();\n    this.firestoreClient = initFirestore(app);\n    this.appInternal = app;\n  }\n\n  Object.defineProperty(FirestoreService.prototype, \"app\", {\n    /**\n     * Returns the app associated with this Storage instance.\n     *\n     * @return {FirebaseApp} The app associated with this Storage instance.\n     */\n    get: function get() {\n      return this.appInternal;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FirestoreService.prototype, \"client\", {\n    get: function get() {\n      return this.firestoreClient;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FirestoreService;\n}();\n\nexports.FirestoreService = FirestoreService;\n\nfunction getFirestoreOptions(app) {\n  if (!validator.isNonNullObject(app) || !('options' in app)) {\n    throw new error_1.FirebaseFirestoreError({\n      code: 'invalid-argument',\n      message: 'First argument passed to admin.firestore() must be a valid Firebase app instance.'\n    });\n  }\n\n  var projectId = utils.getExplicitProjectId(app);\n  var credential = app.options.credential; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n  var firebaseVersion = require('../../package.json').version;\n\n  if (credential instanceof credential_1.ServiceAccountCredential) {\n    return {\n      credentials: {\n        private_key: credential.privateKey,\n        client_email: credential.clientEmail\n      },\n      // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\n      // guaranteed to be available.\n      projectId: projectId,\n      firebaseVersion: firebaseVersion\n    };\n  } else if (credential_1.isApplicationDefault(app.options.credential)) {\n    // Try to use the Google application default credentials.\n    // If an explicit project ID is not available, let Firestore client discover one from the\n    // environment. This prevents the users from having to set GOOGLE_CLOUD_PROJECT in GCP runtimes.\n    return validator.isNonEmptyString(projectId) ? {\n      projectId: projectId,\n      firebaseVersion: firebaseVersion\n    } : {\n      firebaseVersion: firebaseVersion\n    };\n  }\n\n  throw new error_1.FirebaseFirestoreError({\n    code: 'invalid-credential',\n    message: 'Failed to initialize Google Cloud Firestore client with the available credentials. ' + 'Must initialize the SDK with a certificate credential or application default credentials ' + 'to use Cloud Firestore API.'\n  });\n}\n\nexports.getFirestoreOptions = getFirestoreOptions;\n\nfunction initFirestore(app) {\n  var options = getFirestoreOptions(app);\n  var firestoreDatabase;\n\n  try {\n    // Lazy-load the Firestore implementation here, which in turns loads gRPC.\n    firestoreDatabase = require('@google-cloud/firestore').Firestore;\n  } catch (err) {\n    throw new error_1.FirebaseFirestoreError({\n      code: 'missing-dependencies',\n      message: 'Failed to import the Cloud Firestore client library for Node.js. ' + 'Make sure to install the \"@google-cloud/firestore\" npm package. ' + (\"Original error: \" + err)\n    });\n  }\n\n  return new firestoreDatabase(options);\n}","map":null,"metadata":{},"sourceType":"script"}