{"ast":null,"code":"import XLSX from 'xlsx';\nimport firebase from \"./Firebase.js\";\nconst flightHeaders = [\"startTime\", \"endTime\", \"ac\", \"captain\", \"config\", \"fo\", \"fe\", \"crew\", \"details\", \"backup\", \"mission\", \"details\", \"config\", \"remarks\", \"pri\", \"meal\", \"dco\"];\nvar flightData = [];\n\nfunction s2ab(s) {\n  var buf = new ArrayBuffer(s.length);\n  var view = new Uint8Array(buf);\n\n  for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;\n\n  return buf;\n}\n\nconst download = (url, name) => {\n  let a = document.createElement('a');\n  a.href = url;\n  a.download = name;\n  a.click();\n  window.URL.revokeObjectURL(url);\n};\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction Export(ids, dayInfo) {\n  //Gathering all data: \n  var flights = [flightHeaders];\n  firebase.firestore().collection(\"events\").where(firebase.firestore.FieldPath.documentId(), 'in', ids).get().then(querySnapshot => {\n    querySnapshot.docs.forEach(d => {\n      var d = d.data();\n      console.log(d);\n      flights.push([d.startTime, d.endTime, d.ac, d.captain, d.config, d.fo, d.fe, d.crew, d.details, d.backup, d.mission, d.details, d.config, d.remarks, d.pri, d.meal, d.dco]);\n    });\n    console.log(\"getFlights(): \", flights);\n    /* convert from array of arrays to workbook */\n\n    var worksheet = XLSX.utils.aoa_to_sheet(flights);\n    var new_workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(new_workbook, worksheet, \"ExportedFile\");\n    /* write file */\n\n    const wbout = XLSX.write(new_workbook, {\n      type: 'binary',\n      bookType: \"xlsx\"\n    });\n    let url = window.URL.createObjectURL(new Blob([s2ab(wbout)], {\n      type: 'application/octet-stream'\n    }));\n    download(url, 'DailyFlyingOrder.xlsx');\n  }).catch(function (error) {\n    console.log(\"Error getting data: \", error);\n  });\n}\n\nexport default Export;","map":{"version":3,"sources":["/Users/jenny/Desktop/SOAS/scheduler/src/Export.js"],"names":["XLSX","firebase","flightHeaders","flightData","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","download","url","name","a","document","createElement","href","click","window","URL","revokeObjectURL","sleep","ms","Promise","resolve","setTimeout","Export","ids","dayInfo","flights","firestore","collection","where","FieldPath","documentId","get","then","querySnapshot","docs","forEach","d","data","console","log","push","startTime","endTime","ac","captain","config","fo","fe","crew","details","backup","mission","remarks","pri","meal","dco","worksheet","utils","aoa_to_sheet","new_workbook","book_new","book_append_sheet","wbout","write","type","bookType","createObjectURL","Blob","catch","error"],"mappings":"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","sourcesContent":["import XLSX from 'xlsx';\nimport firebase from \"./Firebase.js\";\n\nconst flightHeaders = [\"startTime\",\"endTime\",\"ac\",\"captain\",\"config\",\"fo\",\"fe\",\"crew\",\"details\",\"backup\",\"mission\",\"details\",\"config\",\"remarks\",\"pri\",\"meal\",\"dco\"];\nvar flightData = [];\n\nfunction s2ab(s) {\n    var buf = new ArrayBuffer(s.length);\n    var view = new Uint8Array(buf);\n    for (var i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;\n    return buf;\n}\n\nconst download = (url, name) => {\n    let a = document.createElement('a')\n    a.href = url\n    a.download = name\n    a.click()\n\n    window.URL.revokeObjectURL(url)\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction Export(ids, dayInfo) {\n    //Gathering all data: \n    var flights = [flightHeaders];\n        firebase.firestore().collection(\"events\").where(firebase.firestore.FieldPath.documentId(), 'in', ids)\n            .get()\n            .then((querySnapshot) => {\n                querySnapshot.docs.forEach((d) => {\n                    var d = d.data();\n                    console.log(d)\n                    flights.push([\n                        d.startTime,\n                        d.endTime,\n                        d.ac,\n                        d.captain,\n                        d.config,\n                        d.fo,\n                        d.fe,\n                        d.crew,\n                        d.details,\n                        d.backup,\n                        d.mission,\n                        d.details,\n                        d.config,\n                        d.remarks,\n                        d.pri,\n                        d.meal,\n                        d.dco,]);\n                    })\n\n                console.log(\"getFlights(): \", flights)\n                /* convert from array of arrays to workbook */\n                var worksheet = XLSX.utils.aoa_to_sheet(flights);\n                var new_workbook = XLSX.utils.book_new();\n                XLSX.utils.book_append_sheet(new_workbook, worksheet, \"ExportedFile\");\n\n\n                /* write file */\n                const wbout = XLSX.write(new_workbook, {type:'binary', bookType:\"xlsx\"});\n\n                let url = window.URL.createObjectURL(new Blob([s2ab(wbout)], {type:'application/octet-stream'}))\n\n                download(url, 'DailyFlyingOrder.xlsx')\n\n\n\n\n                })\n            \n            .catch(function(error) {\n                console.log(\"Error getting data: \", error);\n            });\n\n        \n    \n}\n\nexport default Export;\n\n"]},"metadata":{},"sourceType":"module"}