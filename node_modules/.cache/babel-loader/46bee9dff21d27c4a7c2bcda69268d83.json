{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"/Users/jenny/Desktop/SOAS/scheduler/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jenny/Desktop/SOAS/scheduler/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * ResourceCollector class implements asynchronous logic of calling the API call that supports pagination,\n * page by page, collecting all resources (up to `maxResults`) in the array.\n *\n * Usage:\n *   const resourceCollector = new ResourceCollector(apiCall, maxResults); // -1 for unlimited\n *   resourceCollector.processAllPages(request).then(resources => ...);\n */\n\nvar ResourceCollector =\n/*#__PURE__*/\nfunction () {\n  function ResourceCollector(apiCall) {\n    var maxResults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n\n    _classCallCheck(this, ResourceCollector);\n\n    this.apiCall = apiCall;\n    this.resources = [];\n    this.maxResults = maxResults;\n  }\n\n  _createClass(ResourceCollector, [{\n    key: \"callback\",\n    value: function callback(err, resources, nextPageRequest, rawResponse) {\n      var _this = this;\n\n      if (err) {\n        // Something went wrong with this request - failing everything\n        this.rejectCallback(err);\n        return;\n      } // Process one page\n\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = resources[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var resource = _step.value;\n          this.resources.push(resource);\n\n          if (this.resources.length === this.maxResults) {\n            nextPageRequest = null;\n            break;\n          }\n        } // All done?\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (!nextPageRequest) {\n        this.resolveCallback(this.resources);\n        return;\n      } // Schedule the next call\n\n\n      var callback = function callback() {\n        return _this.callback.apply(_this, arguments);\n      };\n\n      setImmediate(this.apiCall, nextPageRequest, callback);\n    }\n  }, {\n    key: \"processAllPages\",\n    value: function processAllPages(firstRequest) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.resolveCallback = resolve;\n        _this2.rejectCallback = reject; // Schedule the first call\n\n        var callback = function callback() {\n          return _this2.callback.apply(_this2, arguments);\n        };\n\n        setImmediate(_this2.apiCall, firstRequest, callback);\n      });\n    }\n  }]);\n\n  return ResourceCollector;\n}();\n\nexports.ResourceCollector = ResourceCollector;","map":null,"metadata":{},"sourceType":"script"}