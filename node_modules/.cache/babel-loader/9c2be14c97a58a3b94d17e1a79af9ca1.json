{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar resolver_dns = require(\"./resolver-dns\");\n\nvar resolver_uds = require(\"./resolver-uds\");\n\nvar uri_parser_1 = require(\"./uri-parser\");\n\nvar registeredResolvers = {};\nvar defaultScheme = null;\n/**\n * Register a resolver class to handle target names prefixed with the `prefix`\n * string. This prefix should correspond to a URI scheme name listed in the\n * [gRPC Name Resolution document](https://github.com/grpc/grpc/blob/master/doc/naming.md)\n * @param prefix\n * @param resolverClass\n */\n\nfunction registerResolver(scheme, resolverClass) {\n  registeredResolvers[scheme] = resolverClass;\n}\n\nexports.registerResolver = registerResolver;\n/**\n * Register a default resolver to handle target names that do not start with\n * any registered prefix.\n * @param resolverClass\n */\n\nfunction registerDefaultScheme(scheme) {\n  defaultScheme = scheme;\n}\n\nexports.registerDefaultScheme = registerDefaultScheme;\n/**\n * Create a name resolver for the specified target, if possible. Throws an\n * error if no such name resolver can be created.\n * @param target\n * @param listener\n */\n\nfunction createResolver(target, listener) {\n  if (target.scheme !== undefined && target.scheme in registeredResolvers) {\n    return new registeredResolvers[target.scheme](target, listener);\n  } else {\n    throw new Error(\"No resolver could be created for target \".concat(uri_parser_1.uriToString(target)));\n  }\n}\n\nexports.createResolver = createResolver;\n/**\n * Get the default authority for the specified target, if possible. Throws an\n * error if no registered name resolver can parse that target string.\n * @param target\n */\n\nfunction getDefaultAuthority(target) {\n  if (target.scheme !== undefined && target.scheme in registeredResolvers) {\n    return registeredResolvers[target.scheme].getDefaultAuthority(target);\n  } else {\n    throw new Error(\"Invalid target \".concat(uri_parser_1.uriToString(target)));\n  }\n}\n\nexports.getDefaultAuthority = getDefaultAuthority;\n\nfunction mapUriDefaultScheme(target) {\n  if (target.scheme === undefined || !(target.scheme in registeredResolvers)) {\n    if (defaultScheme !== null) {\n      return {\n        scheme: defaultScheme,\n        authority: undefined,\n        path: uri_parser_1.uriToString(target)\n      };\n    } else {\n      return null;\n    }\n  }\n\n  return target;\n}\n\nexports.mapUriDefaultScheme = mapUriDefaultScheme;\n\nfunction registerAll() {\n  resolver_dns.setup();\n  resolver_uds.setup();\n}\n\nexports.registerAll = registerAll;","map":null,"metadata":{},"sourceType":"script"}