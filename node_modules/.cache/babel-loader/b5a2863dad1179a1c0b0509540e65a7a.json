{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util = require(\"util\");\n/* constants used in the pegjs parser */\n\n\nexports.BINDING = 1;\nexports.END_BINDING = 2;\nexports.TERMINAL = 3;\n/**\n * Checks that segments only has one terminal segment that is a path wildcard.\n *\n * @private\n *\n * @param {Segments[]} segments the parsed segments\n * @throws {TypeError} if there are too many\n */\n\nfunction allowOnePathWildcard(segments) {\n  var hasPathWildcard = false;\n\n  for (var i = 0; i < segments.length; i++) {\n    var s = segments[i];\n\n    if (s.kind !== exports.TERMINAL || s.literal !== '**') {\n      continue;\n    }\n\n    if (hasPathWildcard) {\n      var tooManyWildcards = 'cannot contain more than one path wildcard';\n      throw new TypeError(tooManyWildcards);\n    }\n\n    hasPathWildcard = true;\n  }\n}\n/**\n * Counts the number of terminal segments.\n *\n * @private\n *\n * @param {Segments[]} segments the parsed segments\n * @return {number} the number of terminal segments in the template\n */\n\n\nfunction countTerminals(segments) {\n  return segments.filter(function (x) {\n    return x.kind === exports.TERMINAL;\n  }).length;\n}\n/**\n * Updates missing literals of each of the binding segments.\n *\n * @private\n *\n * @param {Segments[]} segments the parsed segments\n */\n\n\nfunction updateBindingLiterals(segments) {\n  var bindingIndex = 0;\n  segments.forEach(function (s) {\n    if (s.kind === exports.BINDING && !s.literal) {\n      s.literal = util.format('$%d', bindingIndex);\n      bindingIndex += 1;\n    }\n  });\n}\n/**\n * Completes the parsing of the segments\n *\n * Validates them, and transforms them into the object used by the\n * PathTemplate class.\n *\n * @private\n *\n * @param {Segments[]} segments the parsed segments\n * @param {Object} initializes the attributes of a PathTemplate\n * @return {Object} Returns segments and size\n * @throws {TypeError} if multiple path wildcards exist\n */\n\n\nfunction finishParse(segments) {\n  allowOnePathWildcard(segments);\n  updateBindingLiterals(segments);\n  return {\n    segments: segments,\n    size: countTerminals(segments)\n  };\n}\n\nexports.finishParse = finishParse;","map":null,"metadata":{},"sourceType":"script"}