{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"/Users/jenny/Desktop/SOAS/scheduler/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jenny/Desktop/SOAS/scheduler/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ended = require(\"is-stream-ended\");\n\nvar stream_1 = require(\"stream\");\n\nvar normalApiCaller_1 = require(\"../normalCalls/normalApiCaller\");\n\nvar pagedApiCaller_1 = require(\"./pagedApiCaller\");\n/**\n * A descriptor for methods that support pagination.\n */\n\n\nvar PageDescriptor =\n/*#__PURE__*/\nfunction () {\n  function PageDescriptor(requestPageTokenField, responsePageTokenField, resourceField) {\n    _classCallCheck(this, PageDescriptor);\n\n    this.requestPageTokenField = requestPageTokenField;\n    this.responsePageTokenField = responsePageTokenField;\n    this.resourceField = resourceField;\n  }\n  /**\n   * Creates a new object Stream which emits the resource on 'data' event.\n   */\n\n\n  _createClass(PageDescriptor, [{\n    key: \"createStream\",\n    value: function createStream(apiCall, request, options) {\n      var stream = new stream_1.PassThrough({\n        objectMode: true\n      });\n      options = Object.assign({}, options, {\n        autoPaginate: false\n      });\n      var maxResults = 'maxResults' in options ? options.maxResults : -1;\n      var pushCount = 0;\n      var started = false;\n\n      function callback(err, resources, next) {\n        if (err) {\n          stream.emit('error', err);\n          return;\n        }\n\n        for (var i = 0; i < resources.length; ++i) {\n          if (ended(stream)) {\n            return;\n          }\n\n          if (resources[i] === null) {\n            continue;\n          }\n\n          stream.push(resources[i]);\n          pushCount++;\n\n          if (pushCount === maxResults) {\n            stream.end();\n          }\n        }\n\n        if (ended(stream)) {\n          return;\n        }\n\n        if (!next) {\n          stream.end();\n          return;\n        } // When pageToken is specified in the original options, it will overwrite\n        // the page token field in the next request. Therefore it must be cleared.\n\n\n        if ('pageToken' in options) {\n          delete options.pageToken;\n        }\n\n        if (stream.isPaused()) {\n          request = next;\n          started = false;\n        } else {\n          setImmediate(apiCall, next, options, callback);\n        }\n      }\n\n      stream.on('resume', function () {\n        if (!started) {\n          started = true;\n          apiCall(request, options, callback);\n        }\n      });\n      return stream;\n    }\n  }, {\n    key: \"getApiCaller\",\n    value: function getApiCaller(settings) {\n      if (!settings.autoPaginate) {\n        return new normalApiCaller_1.NormalApiCaller();\n      }\n\n      return new pagedApiCaller_1.PagedApiCaller(this);\n    }\n  }]);\n\n  return PageDescriptor;\n}();\n\nexports.PageDescriptor = PageDescriptor;","map":null,"metadata":{},"sourceType":"script"}